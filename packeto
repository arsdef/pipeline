stages:  
  - clone    
  - build   
  - scan   
  - update_tag   
  - cleanup  

variables:  
  APP_NAME: 'my-app' # Nombre de tu aplicación  
  NEXUS_URL: 'http://nexus.example.com' # URL de Nexus  
  NEXUS_REPO: 'docker-repo' # Repositorio de Nexus  
  BUILD_PACK_URL: 'gcr.io/buildpacks/builder' # URL del builder de Buildpacks  
  SEVERITY_LEVELS: 'CRITICAL,HIGH' # Niveles de severidad para el escaneo  
  NEW_IMAGE_TAG: 'v1.0.1' # Nueva etiqueta que desees usar  
  GITLAB_TOKEN: $CI_JOB_TOKEN # Token de GitLab  
  NEXUS_TOKEN: $NEXUS_TOKEN # Token para Nexus  
  GITLAB_REPO_APP: 'https://gitlab.com/your-group/your-app-repo.git' # URL de tu repositorio de aplicación  
  GITLAB_REPO_HELM: 'https://gitlab.com/your-group/your-helm-chart-repo.git' # URL de tu repositorio de charts de Helm  
  APP_DIRECTORY: 'your-app-directory' # Nombre del directorio de la aplicación  
  HELM_DIRECTORY: 'your-helm-chart-directory' # Nombre del directorio del chart de Helm  
  GIT_BRANCH_APP: 'main' # Rama de la aplicación  
  GIT_BRANCH_HELM: 'main' # Rama del Helm  
  MAVEN_SETTINGS_PATH: ".m2/settings.xml"
  NEXUS_REPO_NPM: "npm-hosted"
stages:  
  - clone  

clone_application:  
  stage: clone  
  image: alpine/git:latest  # Usar la imagen de Alpine con Git preinstalado  
  script:  
    - echo "Cloning application repository..."  
    - git clone -b $GIT_BRANCH_APP $GITLAB_REPO_APP $APP_DIRECTORY  # Clonar el repositorio de la aplicación en la rama especificada  
  only:  
    - $GIT_BRANCH_APP  # Usa la rama definida por la variable  

clone_helm_chart:  
  stage: clone  
  image: alpine/git:latest  # Usar la imagen de Alpine con Git preinstalado  
  script:  
    - echo "Cloning Helm chart repository..."  
    - git clone -b $GIT_BRANCH_HELM $GITLAB_REPO_HELM $HELM_DIRECTORY  # Clonar el repositorio de Helm en la rama especificada  
  only:  
    - $GIT_BRANCH_HELM  # Usa la rama definida por la variable  

update_tag:  
  stage: update_tag  
  image: alpine/git:latest # Usar una imagen ligera para las actualizaciones  
  script: 
    - echo "Updating image tag in values.yaml"  
    - apk add --no-cache sed # Instalar sed  
    - cd $HELM_DIRECTORY  
    - sed -i "s/tag: .*/tag: ${NEW_IMAGE_TAG}/" values.yaml # Actualizar la etiqueta correctamente  
    - echo "Committing changes to values.yaml"  
    - git add values.yaml  
    - git commit -m "Update image tag to ${NEW_IMAGE_TAG}"  
    - git push https://$GITLAB_TOKEN@gitlab.com/your-group/your-helm-chart-repo.git $GIT_BRANCH_HELM # Usa la rama definida por la variable  
  only:  
    - $GIT_BRANCH_HELM # Usa la rama definida por la variable  

build:  
  stage: build  
  image: pbuildpacksio/pack:latest # Usar la imagen del constructor Paketo Buildpacks  
  services:  
    - docker:dind # Docker in Docker para permitir la construcción de imágenes  
  script:  
    - echo "Building application: $APP_NAME"  
    - cd $APP_DIRECTORY  
    - echo "Pushing to Nexus..."  
    - pack build $NEXUS_URL/$NEXUS_REPO/$APP_NAME:$NEW_IMAGE_TAG --builder $BUILD_PACK_URL  
    - echo "$NEXUS_TOKEN" | docker login $NEXUS_URL --username 'your-username' --password-stdin # Autenticarse en Nexus  
  only:  
    - $GIT_BRANCH_APP # Usa la rama definida por la variable  

scan:  
  stage: scan  
  image: aquasec/trivy:latest # Usar la imagen de Trivy para escanear vulnerabilidades  
  script:  
    - echo "Scanning image for vulnerabilities..."  
    - trivy image --severity $SEVERITY_LEVELS $NEXUS_URL/$N
